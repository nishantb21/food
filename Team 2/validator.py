import math

ACTION_THRESHOLD = 1.5

'''
Input format:
genlist: list of values for a particular taste as generated by the system
surveylist: list of values for a particular taste as provided by the users
Both MUST be the same length
'''


class Validator:
    def __init__(self, _genlist, _surveylist):
        self.genlist = _genlist
        self.surveylist = _surveylist
        self.variancevalue = None

        self.reviewpairs = list(zip(self.genlist, self.surveylist))

    def quartile(self, quart):
        self.variancevalue, variancelist = self.variance()
        if (len(variancelist) + 1) % quart == 0:
            return variancelist[int((len(variancelist) + 1) * quart)]
        index = int((len(variancelist) - 1) * quart)
        return round((variancelist[index] + variancelist[index + 1]) / 2, 2)

    def iqr(self):
        return (self.quartile(quart=0.75) -
                self.quartile(quart=0.25))

    def variance(self):
        '''
        Custom version of variance, based on the standard version.
        + Difference is now between generated and surveyed responses,
            instead of intra-values
        + Final formula remains unchanged
        '''
        flavourvariancelist = sorted([round(genval - surval, 2)
                                     for genval, surval
                                     in self.reviewpairs])
        mean = sum(flavourvariancelist) / len(flavourvariancelist)
        flavourvariance = 0
        for variancevalue in flavourvariancelist:
            flavourvariance += (variancevalue - mean) ** 2
        flavourvariance /= (len(flavourvariancelist) - 1)
        return (flavourvariance, flavourvariancelist)

    def adjustment_factor(self):
        q3 = self.quartile(0.75)

        if self.variancevalue > 1.5:
            return round(q3 * math.log(self.variancevalue), 2)
        else:
            return 0

    def __str__(self):
        return str("median: {} variance: {} \
                   \nQ3: {} ln(variance): {}"
                   .format(self.quartile(0.5),
                           round(self.variancevalue, 2),
                           self.quartile(0.75),
                           round(math.log(self.variancevalue), 2)))


if __name__ == "__main__":
    generated = [
        1.00,
        1.50,
        2.00,
        2.50,
        3.00,
        3.50,
        4.00,
        4.50,
        5.00,
        5.50
    ]
    surveyed = [
        5.00,
        6.00,
        6.44,
        8.40,
        3.66,
        6.64,
        6.98,
        6.84,
        9.17,
        8.44
    ]
    validator = Validator(generated, surveyed)
    print(validator)
    print("Adjustment factor: ", validator.adjustment_factor())

